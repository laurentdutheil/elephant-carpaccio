{{- /*gotype: elephant_carpaccio/http-server.GameBoard*/ -}}
{{template "top" .}}
<div class="container">
    <div class="row">
        <div class="two column">
            <table class="u-full-width">
                <caption>DISCOUNT</caption>
                <thead>
                <tr>
                    <th class="u-text-right">Order</th>
                    <th class="u-text-left">Rate</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td class="u-text-right">$1.000</td>
                    <td class="u-text-left">3.00%</td>
                </tr>
                <tr>
                    <td class="u-text-right">$5.000</td>
                    <td class="u-text-left">5.00%</td>
                </tr>
                <tr>
                    <td class="u-text-right">$7.000</td>
                    <td class="u-text-left">7.00%</td>
                </tr>
                <tr>
                    <td class="u-text-right">$10.000</td>
                    <td class="u-text-left">10.00%</td>
                </tr>
                <tr>
                    <td class="u-text-right">$50.000</td>
                    <td class="u-text-left">15.00%</td>
                </tr>
                </tbody>
            </table>
            <canvas id="qr"></canvas>
        </div>
        <div class="two column">
            <table class="u-full-width">
                <caption>TAX</caption>
                <thead>
                <tr>
                    <th class="u-text-right">State</th>
                    <th class="u-text-left">Tax</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td class="u-text-right">UT</td>
                    <td class="u-text-left">6.85%</td>
                </tr>
                <tr>
                    <td class="u-text-right">NV</td>
                    <td class="u-text-left">8.00%</td>
                </tr>
                <tr>
                    <td class="u-text-right">TX</td>
                    <td class="u-text-left">6.25%</td>
                </tr>
                <tr>
                    <td class="u-text-right">AL</td>
                    <td class="u-text-left">4.00%</td>
                </tr>
                <tr>
                    <td class="u-text-right">CA</td>
                    <td class="u-text-left">8.25%</td>
                </tr>
                </tbody>
            </table>
        </div>
        <div class="four column">
            <canvas id="iterationScores"></canvas>
            <canvas id="risk"></canvas>
        </div>
        <div class="four column">
            <canvas id="iterationBusinessValues"></canvas>
            <canvas id="iterationCostOfDelay"></canvas>
        </div>
    </div>
</div>

<script src="/static/lib/chart.js"></script>
<script>

    const scoreElement = document.getElementById('iterationScores');

    scoreChart = new Chart(scoreElement, {
        type: 'line',
        data: {
            labels: ['IT0', 'IT1', 'IT2', 'IT3', 'IT4', 'IT5', 'IT6'],
            datasets: [
                {
                    label: 'ideal',
                    data: [0, 3, 9, 14, 17, 18, 18],
                    borderWidth: 1,
                    tension: 0.3,
                    borderDash: [10, 5]
                },
                {{range .Game.Teams}}
                {
                    label: '{{.Name}}',
                    data: [0{{range .IterationScores}},{{.Point}}{{end}}],
                    borderWidth: 1,
                    tension: 0.3
                },
                {{end}}
            ],
        },
        options: {
            aspectRatio: 1.2,
            plugins: {
                title: {
                    display: true,
                    text: ["STORY POINTS", "1 story = 1 point"],
                    font: {
                        size: 14,
                        weight: 'normal'
                    }
                },
                colors: {
                    forceOverride: true
                }
            }
        }
    });

    const businessValueElement = document.getElementById('iterationBusinessValues');
    const currencyFormat = new Intl.NumberFormat('en-US', {style: 'currency', currency: 'USD', maximumFractionDigits: 0});
    const tooltipLabelFunction = function (context) {
        let label = context.dataset.label || '';

        if (label) {
            label += ': ';
        }
        if (context.parsed.y !== null) {
            label += currencyFormat.format(context.parsed.y);
        }
        return label;
    }

    businessValueChart = new Chart(businessValueElement, {
        type: 'line',
        data: {
            labels: ['IT0', 'IT1', 'IT2', 'IT3', 'IT4', 'IT5', 'IT6'],
            datasets: [
                {
                    label: 'ideal',
                    data: [0.00, 1000.00, 12000.00, 13000.00, 13400.00, 13400.00, 13400.00],
                    borderWidth: 1,
                    tension: 0.3,
                    borderDash: [10, 5]
                },
                {{range .Game.Teams}}
                {
                    label: '{{.Name}}',
                    data: [0.00{{range .IterationScores}},{{.BusinessValue.AmountInCents}}{{end}}],
                    borderWidth: 1,
                    tension: 0.3
                },
                {{end}}
            ],
        },
        options: {
            aspectRatio: 1.2,
            scales: {
                y: {
                    ticks: {
                        callback: function (value) {
                            return currencyFormat.format(value)
                        }
                    }
                }
            },
            plugins: {
                title: {
                    display: true,
                    text: "BUSINESS VALUE",
                    font: {
                        size: 14,
                        weight: 'normal'
                    }
                },
                colors: {
                    forceOverride: true
                },
                tooltip: {
                    callbacks: {
                        label: tooltipLabelFunction
                    }
                }
            }
        }
    });

    const riskElement = document.getElementById('risk');

    riskChart = new Chart(riskElement, {
        type: 'line',
        data: {
            labels: ['IT0', 'IT1', 'IT2', 'IT3', 'IT4', 'IT5', 'IT6'],
            datasets: [
                {
                    label: 'ideal',
                    data: [100, 50, 17, 4, 1, 0, 0],
                    borderWidth: 1,
                    tension: 0.3,
                    borderDash: [10, 5]
                },
                {{range .Game.Teams}}
                {
                    label: '{{.Name}}',
                    data: [100{{range .IterationScores}},{{.Risk}}{{end}}],
                    borderWidth: 1,
                    tension: 0.5
                },
                {{end}}
            ],
        },
        options: {
            aspectRatio: 1.2,
            plugins: {
                title: {
                    display: true,
                    text: "RISK",
                    font: {
                        size: 14,
                        weight: 'normal'
                    }
                },
                colors: {
                    forceOverride: true
                }
            }
        }
    });

    const costOfDelayElement = document.getElementById('iterationCostOfDelay');

    costOfDelayChart = new Chart(costOfDelayElement, {
        type: 'line',
        data: {
            labels: ['IT0', 'IT1', 'IT2', 'IT3', 'IT4', 'IT5', 'IT6'],
            datasets: [
                {
                    label: 'ideal',
                    data: [0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00],
                    borderWidth: 1,
                    tension: 0.3,
                    borderDash: [10, 5]
                },
                {{range .Game.Teams}}
                {
                    label: '{{.Name}}',
                    data: [0.00{{range .IterationScores}}, -{{.CostOfDelay.AmountInCents}}{{end}}],
                    borderWidth: 1,
                    tension: 0.3,
                },
                {{end}}
            ],
        },
        options: {
            aspectRatio: 1.2,
            scales: {
                y: {
                    ticks: {
                        callback: function (value) {
                            return currencyFormat.format(value)
                        }
                    }
                }
            },
            plugins: {
                title: {
                    display: true,
                    text: ["COST OF DELAY", "business value lost"],
                    font: {
                        size: 14,
                        weight: 'normal'
                    }
                },
                colors: {
                    forceOverride: true
                },
                tooltip: {
                    callbacks: {
                        label: tooltipLabelFunction
                    }
                }
            }
        }
    });

    const es = new EventSource("/sse");
    es.onerror = (err) => {
        console.log("onerror", err)
        es.close()
    };

    es.addEventListener("score", (event) => {
        const parsedData = JSON.parse(event.data);
        const {teamName, newScore, newBusinessValue, newRisk, newCostOfDelay} = parsedData;

        scoreChart.data.datasets
            .find((dataset) => dataset.label === teamName)
            .data.push(newScore)
        scoreChart.update()

        businessValueChart.data.datasets
            .find((dataset) => dataset.label === teamName)
            .data.push(newBusinessValue)
        businessValueChart.update()

        riskChart.data.datasets
            .find((dataset) => dataset.label === teamName)
            .data.push(newRisk)
        riskChart.update()

        costOfDelayChart.data.datasets
            .find((dataset) => dataset.label === teamName)
            .data.push(-newCostOfDelay)
        costOfDelayChart.update()

    });

    es.addEventListener("registration", (event) => {
        const parsedData = JSON.parse(event.data);
        const {teamName} = parsedData;

        scoreChart.data.datasets
            .push({label: teamName, data: [0], borderWidth: 1, tension: 0.3})
        scoreChart.update()

        businessValueChart.data.datasets
            .push({label: teamName, data: [0.00], borderWidth: 1, tension: 0.3})
        businessValueChart.update()

        riskChart.data.datasets
            .push({label: teamName, data: [100], borderWidth: 1, tension: 0.3})
        riskChart.update()

        costOfDelayChart.data.datasets
            .push({label: teamName, data: [0.00], borderWidth: 1, tension: 0.3})
        costOfDelayChart.update()
    });

</script>

<script src="/static/lib/qrious.min.js"></script>
<script>
    (function () {
        new QRious({
            element: document.getElementById('qr'),
            value: '{{.BaseURL}}/demo'
        });
    })();
</script>
{{template "footer" .}}